// automatically generated by the FlatBuffers compiler, do not modify

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Reading struct {
	_tab flatbuffers.Table
}

func GetRootAsReading(buf []byte, offset flatbuffers.UOffsetT) *Reading {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Reading{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Reading) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Reading) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Reading) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Reading) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

/// to-one relation
func (rcv *Reading) EventId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

/// to-one relation
func (rcv *Reading) MutateEventId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *Reading) Date() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Reading) MutateDate(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Reading) ValueName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Device sensor data value
func (rcv *Reading) ValueString() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// Device sensor data value
/// Device sensor data value
func (rcv *Reading) ValueInteger() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

/// Device sensor data value
func (rcv *Reading) MutateValueInteger(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

/// Device sensor data value
func (rcv *Reading) ValueFloating() float64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetFloat64(o + rcv._tab.Pos)
	}
	return 0.0
}

/// Device sensor data value
func (rcv *Reading) MutateValueFloating(n float64) bool {
	return rcv._tab.MutateFloat64Slot(16, n)
}

func ReadingStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ReadingAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func ReadingAddEventId(builder *flatbuffers.Builder, eventId uint64) {
	builder.PrependUint64Slot(1, eventId, 0)
}
func ReadingAddDate(builder *flatbuffers.Builder, date int64) {
	builder.PrependInt64Slot(2, date, 0)
}
func ReadingAddValueName(builder *flatbuffers.Builder, valueName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(valueName), 0)
}
func ReadingAddValueString(builder *flatbuffers.Builder, valueString flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(valueString), 0)
}
func ReadingAddValueInteger(builder *flatbuffers.Builder, valueInteger int64) {
	builder.PrependInt64Slot(5, valueInteger, 0)
}
func ReadingAddValueFloating(builder *flatbuffers.Builder, valueFloating float64) {
	builder.PrependFloat64Slot(6, valueFloating, 0.0)
}
func ReadingEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
