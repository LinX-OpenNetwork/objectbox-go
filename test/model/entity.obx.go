// Code generated by ObjectBox; DO NOT EDIT.

package model

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
	"strconv"
)

type entity_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var EntityBinding = entity_EntityInfo{
	Id:  1,
	Uid: 3022148985475790732,
}

// Entity_ contains type-based Property helpers to facilitate some common operations such as Queries.
var Entity_ = struct {
	Id           *objectbox.PropertyUint64
	Int          *objectbox.PropertyInt
	Int8         *objectbox.PropertyInt8
	Int16        *objectbox.PropertyInt16
	Int32        *objectbox.PropertyInt32
	Int64        *objectbox.PropertyInt64
	Uint         *objectbox.PropertyUint
	Uint8        *objectbox.PropertyUint8
	Uint16       *objectbox.PropertyUint16
	Uint32       *objectbox.PropertyUint32
	Uint64       *objectbox.PropertyUint64
	Bool         *objectbox.PropertyBool
	String       *objectbox.PropertyString
	StringVector *objectbox.PropertyStringVector
	Byte         *objectbox.PropertyByte
	ByteVector   *objectbox.PropertyByteVector
	Rune         *objectbox.PropertyRune
	Float32      *objectbox.PropertyFloat32
	Float64      *objectbox.PropertyFloat64
	Date         *objectbox.PropertyInt64
	Complex128   *objectbox.PropertyByteVector
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int: &objectbox.PropertyInt{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int8: &objectbox.PropertyInt8{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int16: &objectbox.PropertyInt16{
		BaseProperty: &objectbox.BaseProperty{
			Id: 4,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int32: &objectbox.PropertyInt32{
		BaseProperty: &objectbox.BaseProperty{
			Id: 5,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Int64: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 6,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint: &objectbox.PropertyUint{
		BaseProperty: &objectbox.BaseProperty{
			Id: 7,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint8: &objectbox.PropertyUint8{
		BaseProperty: &objectbox.BaseProperty{
			Id: 8,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint16: &objectbox.PropertyUint16{
		BaseProperty: &objectbox.BaseProperty{
			Id: 9,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint32: &objectbox.PropertyUint32{
		BaseProperty: &objectbox.BaseProperty{
			Id: 10,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Uint64: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 11,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Bool: &objectbox.PropertyBool{
		BaseProperty: &objectbox.BaseProperty{
			Id: 12,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	String: &objectbox.PropertyString{
		BaseProperty: &objectbox.BaseProperty{
			Id: 13,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	StringVector: &objectbox.PropertyStringVector{
		BaseProperty: &objectbox.BaseProperty{
			Id: 21,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Byte: &objectbox.PropertyByte{
		BaseProperty: &objectbox.BaseProperty{
			Id: 14,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	ByteVector: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id: 15,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Rune: &objectbox.PropertyRune{
		BaseProperty: &objectbox.BaseProperty{
			Id: 16,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Float32: &objectbox.PropertyFloat32{
		BaseProperty: &objectbox.BaseProperty{
			Id: 17,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Float64: &objectbox.PropertyFloat64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 18,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Date: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 19,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
	Complex128: &objectbox.PropertyByteVector{
		BaseProperty: &objectbox.BaseProperty{
			Id: 20,
			Entity: &objectbox.Entity{
				Id: 1,
			},
		},
	},
}

// GeneratorVersion is called by the ObjectBox to verify the compatibility of the generator used to generate this code
func (entity_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by the ObjectBox during model build
func (entity_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Entity", 1, 3022148985475790732)
	model.Property("Id", objectbox.PropertyType_Long, 1, 1213346202559552829)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Int", objectbox.PropertyType_Long, 2, 6609825840127351046)
	model.Property("Int8", objectbox.PropertyType_Byte, 3, 741904540265547276)
	model.Property("Int16", objectbox.PropertyType_Short, 4, 2102961483425256790)
	model.Property("Int32", objectbox.PropertyType_Int, 5, 5086065890743931723)
	model.Property("Int64", objectbox.PropertyType_Long, 6, 7993850425898343586)
	model.Property("Uint", objectbox.PropertyType_Long, 7, 993618338451248101)
	model.Property("Uint8", objectbox.PropertyType_Byte, 8, 8794162191867215541)
	model.Property("Uint16", objectbox.PropertyType_Short, 9, 8820932096807845950)
	model.Property("Uint32", objectbox.PropertyType_Int, 10, 6060435196424462358)
	model.Property("Uint64", objectbox.PropertyType_Long, 11, 6159011311237949479)
	model.Property("Bool", objectbox.PropertyType_Bool, 12, 13717766026420552)
	model.Property("String", objectbox.PropertyType_String, 13, 3525810560076343996)
	model.Property("StringVector", objectbox.PropertyType_StringVector, 21, 3893192683529392073)
	model.Property("Byte", objectbox.PropertyType_Byte, 14, 4035373893984224671)
	model.Property("ByteVector", objectbox.PropertyType_ByteVector, 15, 1294888641203478533)
	model.Property("Rune", objectbox.PropertyType_Int, 16, 445652208596094853)
	model.Property("Float32", objectbox.PropertyType_Float, 17, 2321055489159952634)
	model.Property("Float64", objectbox.PropertyType_Double, 18, 681625187526498317)
	model.Property("Date", objectbox.PropertyType_Date, 19, 2927532418453906842)
	model.Property("Complex128", objectbox.PropertyType_ByteVector, 20, 2323084480359838337)
	model.EntityLastPropertyId(21, 3893192683529392073)
}

// GetId is called by the ObjectBox during Put operations to check for existing ID on an object
func (entity_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Entity).Id, nil
}

// SetId is called by the ObjectBox during Put to update an ID on an object that has just been inserted
func (entity_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*Entity).Id = id
}

// Flatten is called by the ObjectBox to transform an object to a FlatBuffer
func (entity_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*Entity)
	var offsetString = fbutils.CreateStringOffset(fbb, obj.String)
	var offsetStringVector = fbutils.CreateStringVectorOffset(fbb, obj.StringVector)
	var offsetByteVector = fbutils.CreateByteVectorOffset(fbb, obj.ByteVector)
	var offsetComplex128 = fbutils.CreateByteVectorOffset(fbb, complex128BytesToDatabaseValue(obj.Complex128))

	// build the FlatBuffers object
	fbb.StartObject(21)
	fbutils.SetUint64Slot(fbb, 0, id)
	fbutils.SetInt64Slot(fbb, 1, int64(obj.Int))
	fbutils.SetInt8Slot(fbb, 2, obj.Int8)
	fbutils.SetInt16Slot(fbb, 3, obj.Int16)
	fbutils.SetInt32Slot(fbb, 4, obj.Int32)
	fbutils.SetInt64Slot(fbb, 5, obj.Int64)
	fbutils.SetUint64Slot(fbb, 6, uint64(obj.Uint))
	fbutils.SetUint8Slot(fbb, 7, obj.Uint8)
	fbutils.SetUint16Slot(fbb, 8, obj.Uint16)
	fbutils.SetUint32Slot(fbb, 9, obj.Uint32)
	fbutils.SetUint64Slot(fbb, 10, obj.Uint64)
	fbutils.SetBoolSlot(fbb, 11, obj.Bool)
	fbutils.SetUOffsetTSlot(fbb, 12, offsetString)
	fbutils.SetUOffsetTSlot(fbb, 20, offsetStringVector)
	fbutils.SetByteSlot(fbb, 13, obj.Byte)
	fbutils.SetUOffsetTSlot(fbb, 14, offsetByteVector)
	fbutils.SetInt32Slot(fbb, 15, obj.Rune)
	fbutils.SetFloat32Slot(fbb, 16, obj.Float32)
	fbutils.SetFloat64Slot(fbb, 17, obj.Float64)
	fbutils.SetInt64Slot(fbb, 18, timeInt64ToDatabaseValue(obj.Date))
	fbutils.SetUOffsetTSlot(fbb, 19, offsetComplex128)
}

// ToObject is called by the ObjectBox to load an object from a FlatBuffer
func (entity_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Entity{
		Id:           table.GetUint64Slot(4, 0),
		Int:          int(table.GetUint64Slot(6, 0)),
		Int8:         table.GetInt8Slot(8, 0),
		Int16:        table.GetInt16Slot(10, 0),
		Int32:        table.GetInt32Slot(12, 0),
		Int64:        table.GetInt64Slot(14, 0),
		Uint:         uint(table.GetUint64Slot(16, 0)),
		Uint8:        table.GetUint8Slot(18, 0),
		Uint16:       table.GetUint16Slot(20, 0),
		Uint32:       table.GetUint32Slot(22, 0),
		Uint64:       table.GetUint64Slot(24, 0),
		Bool:         table.GetBoolSlot(26, false),
		String:       fbutils.GetStringSlot(table, 28),
		StringVector: fbutils.GetStringVectorSlot(table, 44),
		Byte:         table.GetByteSlot(30, 0),
		ByteVector:   fbutils.GetByteVectorSlot(table, 32),
		Rune:         rune(table.GetInt32Slot(34, 0)),
		Float32:      table.GetFloat32Slot(36, 0),
		Float64:      table.GetFloat64Slot(38, 0),
		Date:         timeInt64ToEntityProperty(table.GetInt64Slot(40, 0)),
		Complex128:   complex128BytesToEntityProperty(fbutils.GetByteVectorSlot(table, 42)),
	}
}

// MakeSlice is called by the ObjectBox to construct a new slice to hold the read objects
func (entity_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Entity, 0, capacity)
}

// AppendToSlice is called by the ObjectBox to fill the slice of the read objects
func (entity_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*Entity), object.(*Entity))
}

// Box provides CRUD access to Entity objects
type EntityBox struct {
	*objectbox.Box
}

// BoxForEntity opens a box of Entity objects
func BoxForEntity(ob *objectbox.ObjectBox) *EntityBox {
	return &EntityBox{
		Box: ob.InternalBox(1),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the Entity.Id property on the passed object will be assigned the new ID as well.
func (box *EntityBox) Put(object *Entity) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the Entity.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *EntityBox) PutAsync(object *Entity) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the Entity.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the Entity.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *EntityBox) PutAll(objects []*Entity) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *EntityBox) Get(id uint64) (*Entity, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Entity), nil
}

// Get reads all stored objects
func (box *EntityBox) GetAll() ([]*Entity, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Entity), nil
}

// Remove deletes a single object
func (box *EntityBox) Remove(object *Entity) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the Entity_ struct to create conditions.
// Keep the *EntityQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *EntityBox) Query(conditions ...objectbox.Condition) *EntityQuery {
	return &EntityQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the Entity_ struct to create conditions.
// Keep the *EntityQuery if you intend to execute the query multiple times.
func (box *EntityBox) QueryOrError(conditions ...objectbox.Condition) (*EntityQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &EntityQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all Entity which Id is either 42 or 47:
// 		box.Query(Entity_.Id.In(42, 47)).Find()
type EntityQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *EntityQuery) Find() ([]*Entity, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*Entity), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *EntityQuery) Offset(offset uint64) *EntityQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *EntityQuery) Limit(limit uint64) *EntityQuery {
	query.Query.Limit(limit)
	return query
}

type testStringIdEntity_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TestStringIdEntityBinding = testStringIdEntity_EntityInfo{
	Id:  2,
	Uid: 5412225159475839048,
}

// TestStringIdEntity_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TestStringIdEntity_ = struct {
	Id *objectbox.PropertyUint64
}{
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 2,
			},
		},
	},
}

// GeneratorVersion is called by the ObjectBox to verify the compatibility of the generator used to generate this code
func (testStringIdEntity_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by the ObjectBox during model build
func (testStringIdEntity_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TestStringIdEntity", 2, 5412225159475839048)
	model.Property("Id", objectbox.PropertyType_Long, 1, 4639124040173808562)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(1, 4639124040173808562)
}

// GetId is called by the ObjectBox during Put operations to check for existing ID on an object
func (testStringIdEntity_EntityInfo) GetId(object interface{}) (uint64, error) {
	var strId = object.(*TestStringIdEntity).Id
	if len(strId) == 0 {
		return 0, nil
	} else {
		return strconv.ParseUint(strId, 10, 64)
	}
}

// SetId is called by the ObjectBox during Put to update an ID on an object that has just been inserted
func (testStringIdEntity_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*TestStringIdEntity).Id = strconv.FormatUint(id, 10)
}

// Flatten is called by the ObjectBox to transform an object to a FlatBuffer
func (testStringIdEntity_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {

	// build the FlatBuffers object
	fbb.StartObject(1)
	fbutils.SetUint64Slot(fbb, 0, id)
}

// ToObject is called by the ObjectBox to load an object from a FlatBuffer
func (testStringIdEntity_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &TestStringIdEntity{
		Id: strconv.FormatUint(table.GetUint64Slot(4, 0), 10),
	}
}

// MakeSlice is called by the ObjectBox to construct a new slice to hold the read objects
func (testStringIdEntity_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*TestStringIdEntity, 0, capacity)
}

// AppendToSlice is called by the ObjectBox to fill the slice of the read objects
func (testStringIdEntity_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*TestStringIdEntity), object.(*TestStringIdEntity))
}

// Box provides CRUD access to TestStringIdEntity objects
type TestStringIdEntityBox struct {
	*objectbox.Box
}

// BoxForTestStringIdEntity opens a box of TestStringIdEntity objects
func BoxForTestStringIdEntity(ob *objectbox.ObjectBox) *TestStringIdEntityBox {
	return &TestStringIdEntityBox{
		Box: ob.InternalBox(2),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TestStringIdEntity.Id property on the passed object will be assigned the new ID as well.
func (box *TestStringIdEntityBox) Put(object *TestStringIdEntity) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TestStringIdEntity.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TestStringIdEntityBox) PutAsync(object *TestStringIdEntity) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TestStringIdEntity.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TestStringIdEntity.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TestStringIdEntityBox) PutAll(objects []*TestStringIdEntity) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TestStringIdEntityBox) Get(id uint64) (*TestStringIdEntity, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TestStringIdEntity), nil
}

// Get reads all stored objects
func (box *TestStringIdEntityBox) GetAll() ([]*TestStringIdEntity, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*TestStringIdEntity), nil
}

// Remove deletes a single object
func (box *TestStringIdEntityBox) Remove(object *TestStringIdEntity) (err error) {
	idUint64, parseErr := strconv.ParseUint(object.Id, 10, 64)
	if parseErr != nil {
		return parseErr
	}

	return box.Box.Remove(idUint64)
}

// Creates a query with the given conditions. Use the fields of the TestStringIdEntity_ struct to create conditions.
// Keep the *TestStringIdEntityQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TestStringIdEntityBox) Query(conditions ...objectbox.Condition) *TestStringIdEntityQuery {
	return &TestStringIdEntityQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TestStringIdEntity_ struct to create conditions.
// Keep the *TestStringIdEntityQuery if you intend to execute the query multiple times.
func (box *TestStringIdEntityBox) QueryOrError(conditions ...objectbox.Condition) (*TestStringIdEntityQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TestStringIdEntityQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TestStringIdEntity which Id is either 42 or 47:
// 		box.Query(TestStringIdEntity_.Id.In(42, 47)).Find()
type TestStringIdEntityQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TestStringIdEntityQuery) Find() ([]*TestStringIdEntity, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*TestStringIdEntity), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TestStringIdEntityQuery) Offset(offset uint64) *TestStringIdEntityQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TestStringIdEntityQuery) Limit(limit uint64) *TestStringIdEntityQuery {
	query.Query.Limit(limit)
	return query
}

type testEntityInline_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TestEntityInlineBinding = testEntityInline_EntityInfo{
	Id:  4,
	Uid: 7566870022778519807,
}

// TestEntityInline_ contains type-based Property helpers to facilitate some common operations such as Queries.
var TestEntityInline_ = struct {
	Date  *objectbox.PropertyInt64
	Value *objectbox.PropertyFloat64
	Id    *objectbox.PropertyUint64
}{
	Date: &objectbox.PropertyInt64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 1,
			Entity: &objectbox.Entity{
				Id: 4,
			},
		},
	},
	Value: &objectbox.PropertyFloat64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 2,
			Entity: &objectbox.Entity{
				Id: 4,
			},
		},
	},
	Id: &objectbox.PropertyUint64{
		BaseProperty: &objectbox.BaseProperty{
			Id: 3,
			Entity: &objectbox.Entity{
				Id: 4,
			},
		},
	},
}

// GeneratorVersion is called by the ObjectBox to verify the compatibility of the generator used to generate this code
func (testEntityInline_EntityInfo) GeneratorVersion() int {
	return 1
}

// AddToModel is called by the ObjectBox during model build
func (testEntityInline_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("TestEntityInline", 4, 7566870022778519807)
	model.Property("Date", objectbox.PropertyType_Long, 1, 6052475349651303914)
	model.Property("Value", objectbox.PropertyType_Double, 2, 7019205901062172310)
	model.Property("Id", objectbox.PropertyType_Long, 3, 5298431058949014957)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.EntityLastPropertyId(3, 5298431058949014957)
}

// GetId is called by the ObjectBox during Put operations to check for existing ID on an object
func (testEntityInline_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*TestEntityInline).Id, nil
}

// SetId is called by the ObjectBox during Put to update an ID on an object that has just been inserted
func (testEntityInline_EntityInfo) SetId(object interface{}, id uint64) {
	object.(*TestEntityInline).Id = id
}

// Flatten is called by the ObjectBox to transform an object to a FlatBuffer
func (testEntityInline_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*TestEntityInline)

	// build the FlatBuffers object
	fbb.StartObject(3)
	fbutils.SetInt64Slot(fbb, 0, obj.Date)
	fbutils.SetFloat64Slot(fbb, 1, obj.Value)
	fbutils.SetUint64Slot(fbb, 2, id)
}

// ToObject is called by the ObjectBox to load an object from a FlatBuffer
func (testEntityInline_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &TestEntityInline{
		BaseWithDate: BaseWithDate{
			Date: table.GetInt64Slot(4, 0),
		},
		BaseWithValue: &BaseWithValue{
			Value: table.GetFloat64Slot(6, 0),
		},
		Id: table.GetUint64Slot(8, 0),
	}
}

// MakeSlice is called by the ObjectBox to construct a new slice to hold the read objects
func (testEntityInline_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*TestEntityInline, 0, capacity)
}

// AppendToSlice is called by the ObjectBox to fill the slice of the read objects
func (testEntityInline_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*TestEntityInline), object.(*TestEntityInline))
}

// Box provides CRUD access to TestEntityInline objects
type TestEntityInlineBox struct {
	*objectbox.Box
}

// BoxForTestEntityInline opens a box of TestEntityInline objects
func BoxForTestEntityInline(ob *objectbox.ObjectBox) *TestEntityInlineBox {
	return &TestEntityInlineBox{
		Box: ob.InternalBox(4),
	}
}

// Put synchronously inserts/updates a single object.
// In case the Id is not specified, it would be assigned automatically (auto-increment).
// When inserting, the TestEntityInline.Id property on the passed object will be assigned the new ID as well.
func (box *TestEntityInlineBox) Put(object *TestEntityInline) (uint64, error) {
	return box.Box.Put(object)
}

// PutAsync asynchronously inserts/updates a single object.
// When inserting, the TestEntityInline.Id property on the passed object will be assigned the new ID as well.
//
// It's executed on a separate internal thread for better performance.
//
// There are two main use cases:
//
// 1) "Put & Forget:" you gain faster puts as you don't have to wait for the transaction to finish.
//
// 2) Many small transactions: if your write load is typically a lot of individual puts that happen in parallel,
// this will merge small transactions into bigger ones. This results in a significant gain in overall throughput.
//
//
// In situations with (extremely) high async load, this method may be throttled (~1ms) or delayed (<1s).
// In the unlikely event that the object could not be enqueued after delaying, an error will be returned.
//
// Note that this method does not give you hard durability guarantees like the synchronous Put provides.
// There is a small time window (typically 3 ms) in which the data may not have been committed durably yet.
func (box *TestEntityInlineBox) PutAsync(object *TestEntityInline) (uint64, error) {
	return box.Box.PutAsync(object)
}

// PutAll inserts multiple objects in single transaction.
// In case Ids are not set on the objects, they would be assigned automatically (auto-increment).
//
// Returns: IDs of the put objects (in the same order).
// When inserting, the TestEntityInline.Id property on the objects in the slice will be assigned the new IDs as well.
//
// Note: In case an error occurs during the transaction, some of the objects may already have the TestEntityInline.Id assigned
// even though the transaction has been rolled back and the objects are not stored under those IDs.
//
// Note: The slice may be empty or even nil; in both cases, an empty IDs slice and no error is returned.
func (box *TestEntityInlineBox) PutAll(objects []*TestEntityInline) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

// Get reads a single object.
//
// Returns nil (and no error) in case the object with the given ID doesn't exist.
func (box *TestEntityInlineBox) Get(id uint64) (*TestEntityInline, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*TestEntityInline), nil
}

// Get reads all stored objects
func (box *TestEntityInlineBox) GetAll() ([]*TestEntityInline, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*TestEntityInline), nil
}

// Remove deletes a single object
func (box *TestEntityInlineBox) Remove(object *TestEntityInline) (err error) {
	return box.Box.Remove(object.Id)
}

// Creates a query with the given conditions. Use the fields of the TestEntityInline_ struct to create conditions.
// Keep the *TestEntityInlineQuery if you intend to execute the query multiple times.
// Note: this function panics if you try to create illegal queries; e.g. use properties of an alien type.
// This is typically a programming error. Use QueryOrError instead if you want the explicit error check.
func (box *TestEntityInlineBox) Query(conditions ...objectbox.Condition) *TestEntityInlineQuery {
	return &TestEntityInlineQuery{
		box.Box.Query(conditions...),
	}
}

// Creates a query with the given conditions. Use the fields of the TestEntityInline_ struct to create conditions.
// Keep the *TestEntityInlineQuery if you intend to execute the query multiple times.
func (box *TestEntityInlineBox) QueryOrError(conditions ...objectbox.Condition) (*TestEntityInlineQuery, error) {
	if query, err := box.Box.QueryOrError(conditions...); err != nil {
		return nil, err
	} else {
		return &TestEntityInlineQuery{query}, nil
	}
}

// Query provides a way to search stored objects
//
// For example, you can find all TestEntityInline which Id is either 42 or 47:
// 		box.Query(TestEntityInline_.Id.In(42, 47)).Find()
type TestEntityInlineQuery struct {
	*objectbox.Query
}

// Find returns all objects matching the query
func (query *TestEntityInlineQuery) Find() ([]*TestEntityInline, error) {
	objects, err := query.Query.Find()
	if err != nil {
		return nil, err
	}
	return objects.([]*TestEntityInline), nil
}

// Offset defines the index of the first object to process (how many objects to skip)
func (query *TestEntityInlineQuery) Offset(offset uint64) *TestEntityInlineQuery {
	query.Query.Offset(offset)
	return query
}

// Limit sets the number of elements to process by the query
func (query *TestEntityInlineQuery) Limit(limit uint64) *TestEntityInlineQuery {
	query.Query.Limit(limit)
	return query
}
