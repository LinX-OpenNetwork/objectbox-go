// This file was automatically generated by ObjectBox, do not modify

package perf

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type entity_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var EntityBinding = entity_EntityInfo{
	Id:  1,
	Uid: 1737161401460991620,
}

var Entity_ = struct {
	Id      uint32
	Int32   uint32
	Int64   uint32
	String  uint32
	Float64 uint32
}{
	Id:      1,
	Int32:   2,
	Int64:   3,
	String:  4,
	Float64: 5,
}

func (entity_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Entity", 1, 1737161401460991620)
	model.Property("Id", objectbox.PropertyType_Long, 1, 7373286741377356014)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Int32", objectbox.PropertyType_Int, 2, 4837914178321008766)
	model.Property("Int64", objectbox.PropertyType_Long, 3, 3841825182616422591)
	model.Property("String", objectbox.PropertyType_String, 4, 6473251296493454829)
	model.Property("Float64", objectbox.PropertyType_Double, 5, 8933082277725371577)
	model.EntityLastPropertyId(5, 8933082277725371577)
}

func (entity_EntityInfo) GetId(entity interface{}) (uint64, error) {
	return entity.(*Entity).Id, nil
}

func (entity_EntityInfo) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent := entity.(*Entity)
	var offsetString = fbutils.CreateStringOffset(fbb, ent.String)

	// build the FlatBuffers object
	fbb.StartObject(5)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependInt32Slot(1, ent.Int32, 0)
	fbb.PrependInt64Slot(2, ent.Int64, 0)
	fbb.PrependUOffsetTSlot(3, offsetString, 0)
	fbb.PrependFloat64Slot(4, ent.Float64, 0)
}

func (entity_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Entity{
		Id:      table.GetUint64Slot(4, 0),
		Int32:   table.GetInt32Slot(6, 0),
		Int64:   table.GetInt64Slot(8, 0),
		String:  fbutils.GetStringSlot(table, 10),
		Float64: table.GetFloat64Slot(12, 0),
	}
}

func (entity_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Entity, 0, capacity)
}

func (entity_EntityInfo) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]*Entity), entity.(*Entity))
}

type EntityBox struct {
	*objectbox.Box
}

func BoxForEntity(ob *objectbox.ObjectBox) *EntityBox {
	return &EntityBox{
		Box: ob.Box(1),
	}
}

func (box *EntityBox) Get(id uint64) (*Entity, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if entity == nil {
		return nil, nil
	}
	return entity.(*Entity), nil
}

func (box *EntityBox) GetAll() ([]*Entity, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return entities.([]*Entity), nil
}

func (box *EntityBox) Remove(entity *Entity) (err error) {
	return box.Box.Remove(entity.Id)
}
