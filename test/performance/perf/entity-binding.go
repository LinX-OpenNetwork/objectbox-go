// This file was automatically generated by ObjectBox, do not modify

package perf

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
)

type entity_ struct {
	Id  objectbox.TypeId
	Uid uint64
}

var EntityBinding = entity_{
	Id:  1,
	Uid: 4559643677707543969,
}

func (entity_) AddToModel(model *objectbox.Model) {
	model.Entity("Entity", 1, 4559643677707543969)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2382573669497447768)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Value", objectbox.PropertyType_Int, 2, 7382906424583112256)
	model.EntityLastPropertyId(2, 7382906424583112256)
}

func (entity_) GetId(entity interface{}) (uint64, error) {
	return entity.(*Entity).Id, nil
}

func (entity_) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent := entity.(*Entity)

	// build the FlatBuffers object
	fbb.StartObject(2)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependUint32Slot(1, ent.Value, 0)
}

func (entity_) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Entity{
		Id:    table.GetUint64Slot(4, 0),
		Value: table.GetUint32Slot(6, 0),
	}
}

func (entity_) MakeSlice(capacity int) interface{} {
	return make([]*Entity, 0, capacity)
}

func (entity_) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]*Entity), entity.(*Entity))
}

type EntityBox struct {
	*objectbox.Box
}

func BoxForEntity(ob *objectbox.ObjectBox) *EntityBox {
	return &EntityBox{
		Box: ob.Box(1),
	}
}

func (box *EntityBox) Get(id uint64) (*Entity, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if entity == nil {
		return nil, nil
	}
	return entity.(*Entity), nil
}

func (box *EntityBox) GetAll() ([]*Entity, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return entities.([]*Entity), nil
}

func (box *EntityBox) Remove(entity *Entity) (err error) {
	return box.Box.Remove(entity.Id)
}
