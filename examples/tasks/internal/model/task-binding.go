// automatically generated by the ObjectBox, do not modify

package model

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type TaskBinding struct {
}

func (TaskBinding) AddToModel(model *objectbox.Model) {
	model.Entity("Task", 1, 1306759095002958910)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2193439623591184445)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Text", objectbox.PropertyType_String, 2, 6177929178231325611)
	model.Property("DateCreated", objectbox.PropertyType_Long, 3, 9141374017424160113)
	model.Property("DateFinished", objectbox.PropertyType_Long, 4, 8083684673086871702)
	model.EntityLastPropertyId(4, 8083684673086871702)
}

func asTask(entity interface{}) (*Task, error) {
	ent, ok := entity.(*Task)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'Task'")
	}
	return ent, nil
}

func asTasks(entities interface{}) ([]Task, error) {
	ent, ok := entities.([]Task)
	if !ok {
		// Programming error, OK to panic
		// TODO don't panic here, handle in the caller if necessary to panic
		panic("Object has wrong type, expecting 'Task'")
	}
	return ent, nil
}

func (TaskBinding) GetId(entity interface{}) (uint64, error) {
	if ent, err := asTask(entity); err != nil {
		return 0, err
	} else {
		return ent.Id, nil
	}
}

func (TaskBinding) Flatten(entity interface{}, fbb *flatbuffers.Builder, id uint64) {
	ent, err := asTask(entity)
	if err != nil {
		// TODO return error and panic in the caller if really, really necessary
		panic(err)
	}

	// prepare the "offset" properties
	var offsetText = fbutils.CreateStringOffset(fbb, ent.Text)

	// build the FlatBuffers object
	fbb.StartObject(4)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependUOffsetTSlot(1, offsetText, 0)
	fbb.PrependInt64Slot(2, ent.DateCreated, 0)
	fbb.PrependInt64Slot(3, ent.DateFinished, 0)
}

func (TaskBinding) ToObject(bytes []byte) interface{} {
	table := fbutils.GetRootAsTable(bytes, flatbuffers.UOffsetT(0))

	return &Task{
		Id:           table.OffsetAsUint64(4),
		Text:         table.OffsetAsString(6),
		DateCreated:  table.OffsetAsInt64(8),
		DateFinished: table.OffsetAsInt64(10),
	}
}

func (TaskBinding) MakeSlice(capacity int) interface{} {
	return make([]Task, 0, capacity)
}

func (TaskBinding) AppendToSlice(slice interface{}, entity interface{}) interface{} {
	return append(slice.([]Task), *entity.(*Task))
}

type TaskBox struct {
	*objectbox.Box
}

func BoxForTask(ob *objectbox.ObjectBox) *TaskBox {
	return &TaskBox{
		Box: ob.Box(1),
	}
}

func (box *TaskBox) Get(id uint64) (*Task, error) {
	entity, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	}
	return asTask(entity)
}

func (box *TaskBox) GetAll() ([]Task, error) {
	entities, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return asTasks(entities)
}

// TODO
// func (box *TaskBox) Remove(entity *Task) (err error) {
// 	   return box.Box.Remove(entity.Id)
// }
