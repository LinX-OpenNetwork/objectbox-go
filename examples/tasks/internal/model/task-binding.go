// This file was automatically generated by ObjectBox, do not modify

package model

import (
	"github.com/google/flatbuffers/go"
	"github.com/objectbox/objectbox-go/objectbox"
	"github.com/objectbox/objectbox-go/objectbox/fbutils"
)

type task_EntityInfo struct {
	Id  objectbox.TypeId
	Uid uint64
}

var TaskBinding = task_EntityInfo{
	Id:  1,
	Uid: 1306759095002958910,
}

var Task_ = struct {
	Id           objectbox.TypeId
	Text         objectbox.TypeId
	DateCreated  objectbox.TypeId
	DateFinished objectbox.TypeId
}{
	Id:           1,
	Text:         2,
	DateCreated:  3,
	DateFinished: 4,
}

func (task_EntityInfo) AddToModel(model *objectbox.Model) {
	model.Entity("Task", 1, 1306759095002958910)
	model.Property("Id", objectbox.PropertyType_Long, 1, 2193439623591184445)
	model.PropertyFlags(objectbox.PropertyFlags_ID)
	model.Property("Text", objectbox.PropertyType_String, 2, 6177929178231325611)
	model.Property("DateCreated", objectbox.PropertyType_Long, 3, 9141374017424160113)
	model.Property("DateFinished", objectbox.PropertyType_Long, 4, 8083684673086871702)
	model.EntityLastPropertyId(4, 8083684673086871702)
}

func (task_EntityInfo) GetId(object interface{}) (uint64, error) {
	return object.(*Task).Id, nil
}

func (task_EntityInfo) SetId(object interface{}, id uint64) error {
	object.(*Task).Id = id
	return nil
}

func (task_EntityInfo) Flatten(object interface{}, fbb *flatbuffers.Builder, id uint64) {
	obj := object.(*Task)
	var offsetText = fbutils.CreateStringOffset(fbb, obj.Text)

	// build the FlatBuffers object
	fbb.StartObject(4)
	fbb.PrependUint64Slot(0, id, 0)
	fbb.PrependUOffsetTSlot(1, offsetText, 0)
	fbb.PrependInt64Slot(2, obj.DateCreated, 0)
	fbb.PrependInt64Slot(3, obj.DateFinished, 0)
}

func (task_EntityInfo) ToObject(bytes []byte) interface{} {
	table := &flatbuffers.Table{
		Bytes: bytes,
		Pos:   flatbuffers.GetUOffsetT(bytes),
	}

	return &Task{
		Id:           table.GetUint64Slot(4, 0),
		Text:         fbutils.GetStringSlot(table, 6),
		DateCreated:  table.GetInt64Slot(8, 0),
		DateFinished: table.GetInt64Slot(10, 0),
	}
}

func (task_EntityInfo) MakeSlice(capacity int) interface{} {
	return make([]*Task, 0, capacity)
}

func (task_EntityInfo) AppendToSlice(slice interface{}, object interface{}) interface{} {
	return append(slice.([]*Task), object.(*Task))
}

type TaskBox struct {
	*objectbox.Box
}

func BoxForTask(ob *objectbox.ObjectBox) *TaskBox {
	return &TaskBox{
		Box: ob.Box(1),
	}
}

func (box *TaskBox) Put(object *Task) (uint64, error) {
	return box.Box.Put(object)
}

func (box *TaskBox) PutAsync(object *Task) (uint64, error) {
	return box.Box.PutAsync(object)
}

func (box *TaskBox) PutAll(objects []*Task) ([]uint64, error) {
	return box.Box.PutAll(objects)
}

func (box *TaskBox) Get(id uint64) (*Task, error) {
	object, err := box.Box.Get(id)
	if err != nil {
		return nil, err
	} else if object == nil {
		return nil, nil
	}
	return object.(*Task), nil
}

func (box *TaskBox) GetAll() ([]*Task, error) {
	objects, err := box.Box.GetAll()
	if err != nil {
		return nil, err
	}
	return objects.([]*Task), nil
}

func (box *TaskBox) Remove(object *Task) (err error) {
	return box.Box.Remove(object.Id)
}
