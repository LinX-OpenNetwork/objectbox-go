long buildNumber = env.BUILD_NUMBER as Long
boolean isMaster = BRANCH_NAME == 'master'
boolean isPublish = BRANCH_NAME == 'publish'
String buildName = 'Linux'
String gradleArgs = '-Dorg.gradle.daemon=false --stacktrace --settings-file settings-linux.gradle'
String uploadArchivesArgs = "$gradleArgs -PpreferredRepo=local uploadArchives"
def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

// https://jenkins.io/doc/book/pipeline/syntax/
pipeline {
    agent {
    node {
        label 'raspberrypi'
        }
    }
    environment {
        GOPATH = "${env.WORKSPACE}/go"
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '500', artifactNumToKeepStr: '500'))
        timeout(time: 6, unit: 'HOURS') // If build hangs (regular build should be much quicker)
    }

    triggers {
        upstream(upstreamProjects: "ObjectStore/${env.BRANCH_NAME.replaceAll("/", "%2F")}",
                threshold: hudson.model.Result.SUCCESS)
    }

    stages {
        stage('init') {
            steps {
                sh 'git submodule update --init --recursive'
            }
        }
        stage('get-flatbuffers') {
            steps {
                sh 'go get github.com/google/flatbuffers/go'
            }
        }
        stage('get-obx-binary') {
            steps {
                sh 'wget -N https://raw.githubusercontent.com/objectbox/objectbox-c/master/download.sh'
                sh 'chmod +x download.sh'
                sh './download.sh --quiet'
            }
        }

        stage('compile') {
            steps {
                sh 'cd objectbox && go build'
            }
        }
        stage('test') {
            steps {
                sh 'cd test && go test'
            }
        }
    }
}
