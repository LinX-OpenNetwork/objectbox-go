long buildNumber = env.BUILD_NUMBER as Long
boolean isMaster = BRANCH_NAME == 'master'
boolean isPublish = BRANCH_NAME == 'publish'
String buildName = 'Linux'
String gradleArgs = '-Dorg.gradle.daemon=false --stacktrace --settings-file settings-linux.gradle'
String uploadArchivesArgs = "$gradleArgs -PpreferredRepo=local uploadArchives"
def COLOR_MAP = ['SUCCESS': 'good', 'FAILURE': 'danger', 'UNSTABLE': 'danger', 'ABORTED': 'danger']

// https://jenkins.io/doc/book/pipeline/syntax/
pipeline {
    agent {
        node {
            label 'linux'
        }
    }
    environment {
        REPO_NAME = "github.com/objectbox/objectbox-go"
        GOPATH = "${env.WORKSPACE}/go"
        LD_LIBRARY_PATH = "${WORKSPACE}/lib"  // We assume it was empty
        CGO_LDFLAGS = "-L${WORKSPACE}/lib  -Wl,-rpath -Wl,${WORKSPACE}/lib"   // Used by the compiler
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '500', artifactNumToKeepStr: '500'))
        timeout(time: 6, unit: 'HOURS') // If build hangs (regular build should be much quicker)
    }

    stages {
        stage('init') {
            steps {
                // Go expects things to be in very specific locations (within $GOPATH)
                sh 'mkdir -p ${GOPATH}/src/$(dirname $REPO_NAME) && ln -svf $WORKSPACE $GOPATH/src/$REPO_NAME'

                // TODO this should be done using some vendoring tool?
                sh 'go get github.com/google/flatbuffers/go'
            }
        }

        stage('get-objectbox-lib') {
            steps {
                sh 'wget -N https://raw.githubusercontent.com/objectbox/objectbox-c/master/download.sh'
                sh 'chmod +x download.sh'
                sh './download.sh --quiet'
            }
        }

        stage('build') {
            steps {
                sh './build/build.sh'
            }
        }
    }
}
